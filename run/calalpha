#!/bin/env ruby
# encoding: utf-8

require '~/.scripts/stringtof.rb'
require 'escort'
require 'gsl'
require 'rainbow/ext/string'

class CalAlpha < ::Escort::ActionCommand::Base
  include GSL
  def execute
    opt = command_options
    if opt[:alpha] == 0.0
      opt[:alpha] = Cdf::chisq_P(opt[:chi2], opt[:dof])
    else
      opt[:chi2] = Cdf::chisq_Pinv(opt[:alpha], opt[:dof])
    end

    opt[:rho] = %w(rho_mu rho_sigma).map { |f| send(f, opt[:dof], opt[:set]) }
      .map { |v| format('%.4g', v) }.join(' +- ')

    sf_erf = GSL::Function.alloc { |x| Sf::erf(x / M_SQRT2) - opt[:alpha] }
    opt[:sigma] = sf_erf.solve([0, 10])[0]

    map_text = { dof: 'd.o.f', chi2: 'chi square', rho: 'rho [mu+-sigma]'}
    ksize = map_text.to_a.max_by { |_, v| v.size }[1].size + 1

    getkey = ->(k) { format("%-#{ksize}.#{ksize}s:", map_text[k] || k).bright }
    getpair = ->(k) { "#{getkey.call(k)} #{opt[k]}" }

    Escort::Logger.output.puts %w(dof chi2 alpha sigma rho)
      .map { |k| getpair.call(k.to_sym) }.join("\n")
  end

  def rho_mu(n, nset)
    - 1.0 / n * (n - nset) / (n - 1)
  end

  def rho_sigma(n, nset)
    Math.sqrt((n - 2.0)**2 * (n - nset) / (n**2 * (n - 1)**2))
  end
end

Escort::App.create do |app|
  app.options do |opts|
    opts.opt :alpha, '', short: '-a', long: '--alpha', type: :float, default: 0.0
    opts.opt :dof, 'degree of freedom', short: '-d', long: '--dof', type: :int, default: 1
    opts.opt :set, 'number of data set', short: '-s', long: '--set', type: :int, default: 1
    opts.opt :chi2, 'chi square', short: '-c', long: '--chi2', type: :float, default: 0.0
  end

  app.action do |options, arguments|
    CalAlpha.new(options, arguments).execute
  end
end
